x[[3]]
x[[3]] = c(3:8)
x[[3]]
> x <- matrix(sample(1:100, 70), 7, 10)
x <- matrix(sample(1:100, 70), 7, 10)
x
(sample(1:100, 70)
q
sample(1:100, 70)
sample(1:100, 70)
sample(1:10)
sample(1:10,10)
sample(1:10,0)
sample(1:10,0)
sample(1:10,1)
sample(1:10)
sample(1:100, 70)
sample(1:100, 70)
x <- matrix(sample(1:100, 70), 7, 10)
x
x[4,3]
x[2]
x[2,]
x[, c(1,4)]
x[c(x > 50), ]
x[x > 50, ]
x[x > 50 , ]
x[x > 50]
x[(x > 50) , ]
x[]
x[][2]
x[(x > 50) , ]
x
x[(x > 50) , ]
x
x[1,]
x[,1]
x
x[ x[1]> 50 ,  ]
x[ x[1]> 50 ,  ]
x
x
x
x[  , c(1:3)  ]
x[  1,  ]
x[  1:3,  ]
x[  (x > 50) ,  ]
x[  (x[1] > 50) ,  ]
x
x[  (x[1,] > 50) ,  ]
x[  (x[1,c(1:10)] > 50) ,  ]
x[x[, 1] > 50, ]
rep(2, 10)
1:10 + rep(2, 10)
1:5 + rep(2, 10)
2 ^ 2
seq(2,2)
seq(2,2,2)
seq(1,100,3)
seq_len(100)
rank(c(4, -1, 2, 6))
order(c(4, -1, 2, 6))
sort(c(4, -1, 2, 6))
order(sort(c(4, -1, 2, 6)))
order(c(4, -1, 2, 6))
order(c(4, -1, 2, 6))
x = -5 :5
x
(x[x > 0])
with(x > 0)
which(x < 0)
which(x > 0)
which(x == 0)
which.min(x)
which.max(x)
x = matrix (sampe(-50,50,100),10,10)
x = matrix (sampe(-50:50,100),10,10)
x = matrix (sample(-50:50,100),10,10)
x
x[,5]
x[,5:9]
x[wich(x[,1]>0), ]
x[which(x[,1]>0), ]
x[,which(x[,1]>0)]
w
x
x*
q
x
x = matrix (sample(-50:50,100),10,10)
x
x[,which(x[,1]>0)]
x[,which(x[1,]>0)]
x
x = matrix (norm( sample(-50:50,100)),10,10)
norm(15,10)
norm(sample(-50:50,100),10)
norm(x)
x = x /pi
x
x
round((x))
floor(x)
ceiling(x)
w
x
trunc(x)
var(x)
var(x[1])
var(x[[1])
var(x[[1]])
var(x[1,])
var(x[1:10])
var(x[1:10 , ])
var(x[1])
var(x[1,])
var(x[1,])
x[1:10 , ]
var(x[1 ,])
var(x[2 ,])
y = c(var(x[1:10,])))
y = c(var(x[1:10,]))
y
y = c(var(x[,1:10]))
y
y = c(var(x[1:10]))
y
y = c(var(x[1,]))
y
var(x[, 1])
var(x[, 2])
var(x[, 3])
x
x = round((x))
x
x[1,]
var(x[1,])
sum(x[1,])/10
y = (x - 4) ^ 2
y
y = (x[1,] - 4) ^ 2
y
sum(y)
var(x)
y
x[1,]
sd()
sd(x)
sd(x[1,])
var(x[1,])
mean(x[1,])
x = sample(1 :10, 10)
x
var(x)
sq(x)
sd(x)
median(x)
mean(x)
x = sample(1:100,10)
x
mean(x)
median(x)
median(x)
x[x>5]
x[x>75,5]
x[x>75.5]
x[x < 75.5]
x = sample(1:100,9)
median(x)
x
quantile(x)
x
sort(x)
x = matrix(c(2,3,1,4),2,2)
x
nrow(x)
rowSums(x)
rowSums(x)
t(x)
det(x)
det(t(x))
x
solve(x)
solve
mmean(x)
mean(x)
median(x)
x * solve(X)
solve(x)
solve(x) * x
x
solve(x) + x
y = solve(x)
y
x
x *y
y *x
x
y
x %% y
x %*% y
x * y
x = matrix(rep(1,4),2,2)
x
y = matrix(rep(2,4),2,2)
y
x * y
x %*% y
x= matrix(sample(-50:50, 50),5,10)
x
y = solve(x)
rbind(x,x)
x = rbind(x,x)
x
x = t(x)
x
y = solve(x)
mean(x)
x = matrix(sample(1:200,100),10,10)
x
y= solve(x)
y
x %*% y
y
x = c(1:10)
solve(x)
diag(x)
y = diag(x)
x %*% y
x
x = matrix(sample(1:200,100),10,10)
diag(x)
x
x %*% y
diag(x)
outer(c(1, 2, 5), c(2, 3, 6))
(c(1, 2, 5)%*% c(2, 3, 6)
q
c(1, 2, 5) %*% c(2, 3, 6)
c(1, 2, 5) %o% c(2, 3, 6)
x =c(1:10)
y = x + c(-0.55, 0.5)
y
x
plot (x,y)
model1 = lm(y~x)
model1
model1 = lm(y~plot(x,3))
model1 = lm(y ~ plot(x,3))
model1 = lm(y ~ poly(x,3))
model2 = lm(y ~ poly(x,3))
model3 = lm(y ~ poly(x,9))
model1 = lm(y~x)
model1
model2
model2
model2
model3
z = seq(1,10,length.out = 250)
plot(z)
z
lines(z,predict(model1,data.frame(X= z)),lty=1)
lines(z,predict(model1,data.frame(X = z)),lty = 1)
lines(z , predict(model1,data.frame(X = z)),lty = 1)
predict(model1,data.frame(X = z))
predict(model1,data.frame(z))
z
x
model1
predict(model1, data.frame(X = z))
predict(model2, data.frame(X = z))
predict(model3, data.frame(X = z))
lines(z , predict(model1,data.frame(X = z)),lty = 1)
x
y
plot(x,y)
lines(z , predict(model1,data.frame(X = z)),lty = 1)
predict(model1,data.frame(X = z)),lty = 1
predict(model1,data.frame(X = z)),lty = 1)
predict(model1,data.frame(X = z))
predict(model1,data.frame(X = mean(z))
)
X
x
x
b =c(1:10)
b =c(1:10)
plot(b,y)
b
y
y = b + c(-0.5,0,5)
y
b
y = b + c(-0.5 , 0,5)
b =1:10
b
b
y = b + c( -0.5, 0.5)
y
plot(b,y)
model1 = lm(y ~ poly(b,3))
model2 = lm(y ~ poly(b,3))
model1 = lm(y ~ b)
model3 = lm(y ~ poly(b,9))
z = seq(1,10, length.out = 250)
lines(z,predict(model1, data.frame()))
q
predict(model1,data.frame(X = z))
x
predict(model1,data.frame(z))
library(twitteR)
library(ROAuth)
library(RCurl)
library(twitteR)
library(ROAuth)
library(RCurl)
if (!require('pacman')) install.packages('pacman')
pacman::p_load(twitteR, sentiment, plyr, ggplot2, wordcloud, RColorBrewer, httpuv, RCurl, base64enc)
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
if (!require('pacman')) install.packages('pacman')
pacman::p_load(twitteR, sentiment, plyr, ggplot2, wordcloud, RColorBrewer, httpuv, RCurl, base64enc)
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
api_key = 'lqd5L76cTdIJUKh6wCKtvk8ui'
api_secret = 'eKNDz9u0BG8OCIDX8pXoyrdtbqXMiAq2lx68FkamOS8rjpYQSn'
access_token = '49266784-6ADI5apTARq56TJOpdBirDZk4gzmoByktYauxdCd8'
access_token_secret = 'HT4c5ZualavTzEF12QbT6oelws3c3dZ748h6wQfBFII6J'
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
some_tweets = searchTwitter('nespresso', n=10000, lang='en')
df <- twListToDF(some_tweets)
View(df)
library("plyr")
library("ggplot2")
library("wordcloud")
library("RColorBrewer")
library("tm")
library("SnowballC")
library("sentiment")
library("plyr")
library("ggplot2")
library("wordcloud")
library("RColorBrewer")
library("tm")
library("SnowballC")
library("sentiment")
textdata <- df$text
textdata <- df$text
textdata
textdata = gsub("[[:punct:]]", "", textdata)
textdata = gsub("[[:digit:]]", "", textdata)
textdata = gsub("http\\w+", "", textdata)
textdata = gsub("[ \t]{2,}", "", textdata)
textdata = gsub("^\\s+|\\s+$", "", textdata)
try.error = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
textdata = sapply(textdata, try.error)
textdata = textdata[!is.na(textdata)]
class_emo = classify_emotion(textdata, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(textdata, algorithm="bayes")
polarity = class_pol[,4]
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
View(sent_df)
levels=names(sort(table(emotion), decreasing=TRUE))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="")
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="")
View(sent_df)
View(class_emo)
write.csv(sent_df,./'nespresso.csv')
write.csv(sent_df,."/nespresso.csv")
write.csv(sent_df, file = "./nespresso.csv")
write.csv(sent_df, file = "./Data/nespresso.csv")
getwd()
setwd("C:/Users/ylasmak/Documents/GitHub/SentimentAnalysis")
write.csv(sent_df, file = "./Data/nespresso.csv")
textdata = gsub("[\r\n]", "", textdata)
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
write.csv(sent_df, file = "./Data/nespresso.csv")
library(twitteR)
library(ROAuth)
library(RCurl)
if (!require('pacman')) install.packages('pacman')
pacman::p_load(twitteR, sentiment, plyr, ggplot2, wordcloud, RColorBrewer, httpuv, RCurl, base64enc)
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
api_key = 'lqd5L76cTdIJUKh6wCKtvk8ui'
api_secret = 'eKNDz9u0BG8OCIDX8pXoyrdtbqXMiAq2lx68FkamOS8rjpYQSn'
access_token = '49266784-6ADI5apTARq56TJOpdBirDZk4gzmoByktYauxdCd8'
access_token_secret = 'HT4c5ZualavTzEF12QbT6oelws3c3dZ748h6wQfBFII6J'
some_tweets = searchTwitter('nespresso', n=10000, lang='fr')
some_tweets = searchTwitter('GalaxyNote7', n=10000, lang='fr')
df <- twListToDF(some_tweets)
View(df)
library("plyr")
library("ggplot2")
library("wordcloud")
library("RColorBrewer")
library("tm")
library("SnowballC")
library("sentiment")
setwd("C:/Users/ylasmak/Documents/GitHub/SentimentAnalysis")
textdata <- df$text
textdata = gsub("[[:punct:]]", "", textdata)
textdata = gsub("[[:digit:]]", "", textdata)
textdata = gsub("http\\w+", "", textdata)
textdata = gsub("[ \t]{2,}", "", textdata)
textdata = gsub("^\\s+|\\s+$", "", textdata)
textdata = gsub("[\r\n]", "", textdata)
try.error = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
textdata = sapply(textdata, try.error)
textdata = textdata[!is.na(textdata)]
class_emo = classify_emotion(textdata, algorithm="bayes", prior=1.0)
View(class_emo)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(textdata, algorithm="bayes")
polarity = class_pol[,4]
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
View(sent_df)
some_tweets = searchTwitter('samsung', n=10000, lang='en')
df <- twListToDF(some_tweets)
textdata <- df$text
textdata = gsub("[[:punct:]]", "", textdata)
textdata = gsub("[[:digit:]]", "", textdata)
textdata = gsub("http\\w+", "", textdata)
textdata = gsub("[ \t]{2,}", "", textdata)
textdata = gsub("^\\s+|\\s+$", "", textdata)
textdata = gsub("[\r\n]", "", textdata)
try.error = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
textdata = sapply(textdata, try.error)
textdata = textdata[!is.na(textdata)]
class_emo = classify_emotion(textdata, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(textdata, algorithm="bayes")
polarity = class_pol[,4]
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
View(sent_df)
levels=names(sort(table(emotion), decreasing=TRUE))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="")
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="")
install.packages("RSentiment")
setwd("C:/Users/ylasmak/Documents/GitHub/SentimentAnalysis")
df <- read.csv(file = "./Data/Tweets.csv")
View(df)
textdata <- df$text
textdata = gsub("[[:punct:]]", "", textdata)
textdata = gsub("[[:digit:]]", "", textdata)
textdata = gsub("http\\w+", "", textdata)
textdata = gsub("[ \t]{2,}", "", textdata)
textdata = gsub("^\\s+|\\s+$", "", textdata)
textdata = gsub("[\r\n]", "", textdata)
try.error = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
textdata = sapply(textdata, try.error)
textdata = textdata[!is.na(textdata)]
class_emo = classify_emotion(textdata, algorithm="bayes", prior=1.0)
View(class_emo)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(textdata, algorithm="bayes")
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
polarity = class_pol[,4]
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity,result = df$airline_sentiment stringsAsFactors=FALSE)
sent_df = data.frame(text=textdata, emotion=emotion,
polarity=polarity,result = df$airline_sentiment, stringsAsFactors=FALSE)
write.csv(sent_df, file = "./Data/tweeter_Result.csv")
